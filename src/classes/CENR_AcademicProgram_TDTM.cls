/*
    Copyright (c) 2016, Salesforce.org
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of Salesforce.org nor the names of
      its contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
    COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
    ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
    POSSIBILITY OF SUCH DAMAGE.
*/
/**
* @author Salesforce.org
* @date 2016
* @group Course Enrollments
* @group-content ../../ApexDocContent/CourseEnrollments.htm
* @description Automatically populates the Academic Program field in a Course Enrollment.
*/
public with sharing class CENR_AcademicProgram_TDTM extends TDTM_Runnable {

    /*******************************************************************************************************
    * @description Updates key affiliation lookups on contact, and any other primary affiliation
    * of the new type.
    * @param listNew the list of Course Connections from trigger new.
    * @param listOld the list of Coursen Connections from trigger old.
    * @param triggerAction which trigger event (BeforeInsert, AfterInsert, etc.).
    * @param objResult the describe for Course Enrollments.
    * @return dmlWrapper.
    ********************************************************************************************************/
    public override DmlWrapper run(List<SObject> newlist, List<SObject> oldlist,
        TDTM_Runnable.Action triggerAction, Schema.DescribeSObjectResult objResult) {

        DmlWrapper dmlWrapper = new DmlWrapper();
        List<Course_Enrollment__c> newCourseEnrollments = (List<Course_Enrollment__c>)newlist;
        List<Course_Enrollment__c> oldCourseEnrollments = (List<Course_Enrollment__c>)oldList;

        Boolean affiliationIsEnabled = checkAffiliationEnabled();

        if (triggerAction == TDTM_Runnable.Action.BeforeInsert ||
            triggerAction == TDTM_Runnable.Action.BeforeUpdate)
        {
            handleBeforeTrigger(newCourseEnrollments, oldCourseEnrollments, triggerAction, affiliationIsEnabled);
        }

        return dmlWrapper;
    }

	/*******************************************************************************************************
    * @description This method checks if auto population of Affiliation on new Student Course Connection is
    * enabled in the org.
    * @return Boolean.
    ********************************************************************************************************/
    private Boolean checkAffiliationEnabled() {
        return UTIL_CustomSettingsFacade.getSettings().Populate_Affil_on_Student_Course_Cxn__c ;
    }

	/*******************************************************************************************************
    * @description This method handles beforeTrigger processes.
    * @param newCourseEnrollments is a list of Course Connections from trigger new.
    * @param oldCourseEnrollments is a list of Course Connections from trigger old.
    * @param triggerAction which trigger event (BeforeInsert, AfterInsert, etc.).
    * @param affiliationIsEnabled is a boolean that denotes if auto population of Affiliation on
    * Student Course Connection is enabled in org.
    * @return Boolean.
    ********************************************************************************************************/
    private void handleBeforeTrigger(List<Course_Enrollment__c> newCourseEnrollments, List<Course_Enrollment__c> oldCourseEnrollments,
                        TDTM_Runnable.Action triggerAction, Boolean affiliationIsEnabled) {
        Set<Id> pEnrollIDsToQuery = new Set<Id>();
        List<Program_Enrollment__c> pEnrollments = new List<Program_Enrollment__c>();

        if (newCourseEnrollments.size() > 0 && newCourseEnrollments != NULL) {

            for (Course_Enrollment__c ce : newCourseEnrollments) {
                //Get the ID of each parent Program Enrollment
           		if (ce.Program_Enrollment__c != null) {
                    pEnrollIDsToQuery.add(ce.Program_Enrollment__c);
                }
            }

            if (pEnrollIDsToQuery.size() > 0) {
                pEnrollments = queryProgramEnrollments(pEnrollIDsToQuery);
            }

            for (Integer i = 0; i < newCourseEnrollments.size(); i++) {
                Map<Id, Program_Enrollment__c> pEnrollmentsMap = new Map<Id, Program_Enrollment__c>(pEnrollments);
                Course_Enrollment__c enroll = (Course_Enrollment__c)newCourseEnrollments[i];

                Boolean isBeforeUpdate;

                //BEFORE INSERT
                if (triggerAction == TDTM_Runnable.Action.BeforeInsert) {
                    isBeforeUpdate = FALSE;
                    if (enroll.Program_Enrollment__c != NULL) {
                        assignAccountAndAffiliation (pEnrollmentsMap, enroll, NULL, affiliationIsEnabled, isBeforeUpdate);
                    }
                }

                //BEFORE UPDATE
                if (triggerAction == TDTM_Runnable.Action.BeforeUpdate) {
                    isBeforeUpdate = TRUE;
                    Course_Enrollment__c oldEnroll = (Course_Enrollment__c)oldCourseEnrollments[i];
                    if (oldEnroll.Program_Enrollment__c == NULL && enroll.Program_Enrollment__c != NULL) {
                        assignAccountAndAffiliation (pEnrollmentsMap, enroll, oldEnroll, affiliationIsEnabled, isBeforeUpdate);
                    }
                }
            }
        }
    }

    /*******************************************************************************************************
    * @description This method queries all Program Enrollments associated to the new
    * Student Course Connection.
    * @param pEnrollIDsToQuery is a list of Program Enrollment Ids associated to
    * the new Student Course Connection.
    * @return list of Program Enrollments.
    ********************************************************************************************************/
    private List<Program_Enrollment__c> queryProgramEnrollments(Set<Id> pEnrollIDsToQuery) {
        //Query the parent Account (Academic Program) of each Program Enrollment, since that field
        //wasn't in the trigger for being two levels up.
        List<Program_Enrollment__c> pEnrollments = [SELECT Account__c, Affiliation__c
                                                            FROM Program_Enrollment__c
                                                            WHERE Account__c != NULL AND ID IN :pEnrollIDsToQuery];
        return pEnrollments;
    }

    /*******************************************************************************************************
    * @description This method handles specifically populates Account__c and Affiliation__c from
    * Program Enrollment on Student Course Connection.
    * @param pEnrollmentsMap is a map of Program Enrollment Id's to Program Enrollment records.
    * @param enroll is the Course Connection from trigger new.
    * @param oldEnroll is the Course Connection from trigger old.
    * @param affiliationIsEnabled is a boolean that denotes if auto population of Affiliation on
    * Student Course Connection is enabled in org.
    * @param isBeforeUpdate is a boolean that denotes if the current triggerAction is beforeUpdate.
    ********************************************************************************************************/
    private void assignAccountAndAffiliation(Map<Id, Program_Enrollment__c> pEnrollmentsMap, Course_Enrollment__c enroll, Course_Enrollment__c oldEnroll,
    										    Boolean affiliationIsEnabled, Boolean isBeforeUpdate)
    {
        if (!pEnrollmentsMap.isEmpty()) {
            Program_Enrollment__c pEnroll = pEnrollmentsMap.get(enroll.Program_Enrollment__c);
            if (pEnroll != NULL) {
                enroll.Account__c = pEnroll.Account__c;
                if (affiliationIsEnabled) {
                    if (isBeforeUpdate) {
                        if (oldEnroll.Affiliation__c == NULL) {
                            enroll.Affiliation__c = pEnroll.Affiliation__c;
                        }
                    } else {
                        enroll.Affiliation__c = pEnroll.Affiliation__c;
                    }
                }
            }
        }
    }
}